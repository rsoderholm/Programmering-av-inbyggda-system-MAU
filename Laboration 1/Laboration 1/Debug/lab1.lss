
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800200  000003d2  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000056e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c8  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000808  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003fc  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000772  00000000  00000000  0000126a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b0  00000000  00000000  000019dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000213  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000059a  00000000  00000000  00001d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  00002339  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ed       	ldi	r30, 0xD2	; 210
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 32       	cpi	r26, 0x28	; 40
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	43 d0       	rcall	.+134    	; 0x196 <main>
 110:	5e c1       	rjmp	.+700    	; 0x3ce <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <delay_1_micros>:
 *  Author: Magnus Krampell
 */ 

#include "delay.h"

void delay_1_micros() {
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	1f 92       	push	r1
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t j=0;
 11e:	19 82       	std	Y+1, r1	; 0x01
	j++;
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	89 83       	std	Y+1, r24	; 0x01
	j++;
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	89 83       	std	Y+1, r24	; 0x01
}
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <delay_micros>:
void delay_micros(uint8_t n)   {
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
	 for (int i = 0; i <n; i++)
 13c:	08 2f       	mov	r16, r24
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	10 16       	cp	r1, r16
 142:	11 06       	cpc	r1, r17
 144:	3c f4       	brge	.+14     	; 0x154 <delay_micros+0x20>
 146:	c0 e0       	ldi	r28, 0x00	; 0
 148:	d0 e0       	ldi	r29, 0x00	; 0
	 {
		 delay_1_micros();
 14a:	e4 df       	rcall	.-56     	; 0x114 <delay_1_micros>
	volatile uint8_t j=0;
	j++;
	j++;
}
void delay_micros(uint8_t n)   {
	 for (int i = 0; i <n; i++)
 14c:	21 96       	adiw	r28, 0x01	; 1
 14e:	c0 17       	cp	r28, r16
 150:	d1 07       	cpc	r29, r17
 152:	dc f3       	brlt	.-10     	; 0x14a <delay_micros+0x16>
	 {
		 delay_1_micros();
	 }
}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <delay_ms>:
void delay_ms(uint8_t n)   {
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
	for(int i = 0; i<n;i++)
 166:	08 2f       	mov	r16, r24
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	10 16       	cp	r1, r16
 16c:	11 06       	cpc	r1, r17
 16e:	74 f4       	brge	.+28     	; 0x18c <delay_ms+0x2e>
 170:	c0 e0       	ldi	r28, 0x00	; 0
 172:	d0 e0       	ldi	r29, 0x00	; 0
	{
		delay_micros(250);
 174:	8a ef       	ldi	r24, 0xFA	; 250
 176:	de df       	rcall	.-68     	; 0x134 <delay_micros>
		delay_micros(250);
 178:	8a ef       	ldi	r24, 0xFA	; 250
 17a:	dc df       	rcall	.-72     	; 0x134 <delay_micros>
		delay_micros(250);
 17c:	8a ef       	ldi	r24, 0xFA	; 250
 17e:	da df       	rcall	.-76     	; 0x134 <delay_micros>
		delay_micros(250);
 180:	8a ef       	ldi	r24, 0xFA	; 250
 182:	d8 df       	rcall	.-80     	; 0x134 <delay_micros>
	 {
		 delay_1_micros();
	 }
}
void delay_ms(uint8_t n)   {
	for(int i = 0; i<n;i++)
 184:	21 96       	adiw	r28, 0x01	; 1
 186:	c0 17       	cp	r28, r16
 188:	d1 07       	cpc	r29, r17
 18a:	a4 f3       	brlt	.-24     	; 0x174 <delay_ms+0x16>
		delay_micros(250);
		delay_micros(250);
		delay_micros(250);
		delay_micros(250);
	}
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <main>:
#include "lcd/lcd.h"

int main(void)
{

	numkey_init();
 196:	9a d0       	rcall	.+308    	; 0x2cc <numkey_init>
	lcd_init();
 198:	53 d0       	rcall	.+166    	; 0x240 <lcd_init>
	lcd_clear();
 19a:	85 d0       	rcall	.+266    	; 0x2a6 <lcd_clear>
	
	while(1)
	{
		char input = numkey_read();
 19c:	a6 d0       	rcall	.+332    	; 0x2ea <numkey_read>
		if (input != 0)
 19e:	88 23       	and	r24, r24
 1a0:	e9 f3       	breq	.-6      	; 0x19c <main+0x6>
		{
			if(input == 'D')
 1a2:	84 34       	cpi	r24, 0x44	; 68
 1a4:	11 f4       	brne	.+4      	; 0x1aa <main+0x14>
			{
				lcd_clear();
 1a6:	7f d0       	rcall	.+254    	; 0x2a6 <lcd_clear>
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <main+0x1a>
			} else
			
				lcd_write(CHR, input);
 1aa:	68 2f       	mov	r22, r24
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	26 d0       	rcall	.+76     	; 0x1fc <lcd_write>
		}
		
		while(input != 0)
		{
			input = numkey_read();
 1b0:	9c d0       	rcall	.+312    	; 0x2ea <numkey_read>
			} else
			
				lcd_write(CHR, input);
		}
		
		while(input != 0)
 1b2:	81 11       	cpse	r24, r1
 1b4:	fd cf       	rjmp	.-6      	; 0x1b0 <main+0x1a>
 1b6:	f2 cf       	rjmp	.-28     	; 0x19c <main+0x6>

000001b8 <write_byte>:

/*
 * Write a byte of data to the LCD, starting with the most significant bit.
 */
static void write_byte(uint8_t data)
{
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	08 2f       	mov	r16, r24
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
 1c2:	2e 98       	cbi	0x05, 6	; 5
 1c4:	18 e0       	ldi	r17, 0x08	; 8
	for (i = 0; i < 8; i++) {
		// Write MSB
		if (data & 0x80) {		// bit is 1?
			SET_BIT(PORTH, 6);	// write 1
		} else {				// bit is 0?
			CLR_BIT(PORTH, 6);	// write 0
 1c6:	c2 e0       	ldi	r28, 0x02	; 2
 1c8:	d1 e0       	ldi	r29, 0x01	; 1
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
	// Write byte
	for (i = 0; i < 8; i++) {
		// Write MSB
		if (data & 0x80) {		// bit is 1?
 1ca:	00 23       	and	r16, r16
 1cc:	24 f4       	brge	.+8      	; 0x1d6 <write_byte+0x1e>
			SET_BIT(PORTH, 6);	// write 1
 1ce:	88 81       	ld	r24, Y
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	88 83       	st	Y, r24
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <write_byte+0x24>
		} else {				// bit is 0?
			CLR_BIT(PORTH, 6);	// write 0
 1d6:	88 81       	ld	r24, Y
 1d8:	8f 7b       	andi	r24, 0xBF	; 191
 1da:	88 83       	st	Y, r24
		}
		// shift out data to LCD
		SET_BIT(PORTH, 5);
 1dc:	88 81       	ld	r24, Y
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	88 83       	st	Y, r24
		delay_1_micros();
 1e2:	98 df       	rcall	.-208    	; 0x114 <delay_1_micros>
		CLR_BIT(PORTH, 5);
 1e4:	88 81       	ld	r24, Y
 1e6:	8f 7d       	andi	r24, 0xDF	; 223
 1e8:	88 83       	st	Y, r24
		// shift to next bit
		data = data << 1;
 1ea:	00 0f       	add	r16, r16
 1ec:	11 50       	subi	r17, 0x01	; 1
{
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
	// Write byte
	for (i = 0; i < 8; i++) {
 1ee:	69 f7       	brne	.-38     	; 0x1ca <write_byte+0x12>
		CLR_BIT(PORTH, 5);
		// shift to next bit
		data = data << 1;
	}
	// Set CS pin HIGH
	SET_BIT(PORTB, 6);
 1f0:	2e 9a       	sbi	0x05, 6	; 5
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	08 95       	ret

000001fc <lcd_write>:
 * parameter:
 *	lcd_reg: register to communicate with (Command or Data register)
 *	data: 8-bit command or character
 */
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
	uint8_t character;
	uint8_t i;
	
	if (lcd_reg == CMD) {
 202:	81 11       	cpse	r24, r1
 204:	04 c0       	rjmp	.+8      	; 0x20e <lcd_write+0x12>
		// Prepare to send a command
		CLR_BIT(PORTB, 4);
 206:	2c 98       	cbi	0x05, 4	; 5
		// Write command
		write_byte(data);
 208:	86 2f       	mov	r24, r22
 20a:	d6 df       	rcall	.-84     	; 0x1b8 <write_byte>
 20c:	15 c0       	rjmp	.+42     	; 0x238 <lcd_write+0x3c>
	} else {
		// Prepare to send a character
		SET_BIT(PORTB, 4);
 20e:	2c 9a       	sbi	0x05, 4	; 5
		// write segment 1st to 5th segment of character
		character = data - ASCII_OFFSET;
 210:	60 52       	subi	r22, 0x20	; 32
		for (i = 0; i < CHR_WIDTH; i++) {
			write_byte(lcd_char_table[character][i]);
 212:	86 2f       	mov	r24, r22
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	ec 01       	movw	r28, r24
 218:	cc 0f       	add	r28, r28
 21a:	dd 1f       	adc	r29, r29
 21c:	cc 0f       	add	r28, r28
 21e:	dd 1f       	adc	r29, r29
 220:	c8 0f       	add	r28, r24
 222:	d9 1f       	adc	r29, r25
 224:	c0 50       	subi	r28, 0x00	; 0
 226:	de 4f       	sbci	r29, 0xFE	; 254
	} else {
		// Prepare to send a character
		SET_BIT(PORTB, 4);
		// write segment 1st to 5th segment of character
		character = data - ASCII_OFFSET;
		for (i = 0; i < CHR_WIDTH; i++) {
 228:	10 e0       	ldi	r17, 0x00	; 0
			write_byte(lcd_char_table[character][i]);
 22a:	89 91       	ld	r24, Y+
 22c:	c5 df       	rcall	.-118    	; 0x1b8 <write_byte>
	} else {
		// Prepare to send a character
		SET_BIT(PORTB, 4);
		// write segment 1st to 5th segment of character
		character = data - ASCII_OFFSET;
		for (i = 0; i < CHR_WIDTH; i++) {
 22e:	1f 5f       	subi	r17, 0xFF	; 255
 230:	15 30       	cpi	r17, 0x05	; 5
 232:	d9 f7       	brne	.-10     	; 0x22a <lcd_write+0x2e>
			write_byte(lcd_char_table[character][i]);
		}
		// write last segment of character (padding)
		write_byte(0x00);
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	c0 df       	rcall	.-128    	; 0x1b8 <write_byte>
	}
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	08 95       	ret

00000240 <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// Configure I/O
	SET_BIT(DDRH, 5);		// Clock pin (output)
 240:	e1 e0       	ldi	r30, 0x01	; 1
 242:	f1 e0       	ldi	r31, 0x01	; 1
 244:	80 81       	ld	r24, Z
 246:	80 62       	ori	r24, 0x20	; 32
 248:	80 83       	st	Z, r24
	SET_BIT(DDRH, 6);		// Data pin (output)
 24a:	80 81       	ld	r24, Z
 24c:	80 64       	ori	r24, 0x40	; 64
 24e:	80 83       	st	Z, r24
	SET_BIT(DDRB, 4);		// Data/command pin (output)
 250:	24 9a       	sbi	0x04, 4	; 4
	SET_BIT(DDRB, 5);		// Reset pin (output)
 252:	25 9a       	sbi	0x04, 5	; 4
	SET_BIT(DDRB, 6);		// CS/SS pin (output)
 254:	26 9a       	sbi	0x04, 6	; 4
	
	// Initialize LCD
	delay_ms(20);			// Let Vcc stabilize after power-up!
 256:	84 e1       	ldi	r24, 0x14	; 20
 258:	82 df       	rcall	.-252    	; 0x15e <delay_ms>
	SET_BIT(PORTB, 5);		// Set Reset pin HIGH
 25a:	2d 9a       	sbi	0x05, 5	; 5
	delay_ms(10);			// Wait a little...
 25c:	8a e0       	ldi	r24, 0x0A	; 10
 25e:	7f df       	rcall	.-258    	; 0x15e <delay_ms>
	SET_BIT(PORTB, 6);		// Set CS pin HIGH (normal level)
 260:	2e 9a       	sbi	0x05, 6	; 5
	lcd_write(CMD, 0x21);	// Function set (H=1)
 262:	61 e2       	ldi	r22, 0x21	; 33
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	ca df       	rcall	.-108    	; 0x1fc <lcd_write>
	lcd_write(CMD, 0x13);	// Set bias mode 1:48
 268:	63 e1       	ldi	r22, 0x13	; 19
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	c7 df       	rcall	.-114    	; 0x1fc <lcd_write>
	lcd_write(CMD, 0xC5);	// Set Vop (contrast)
 26e:	65 ec       	ldi	r22, 0xC5	; 197
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	c4 df       	rcall	.-120    	; 0x1fc <lcd_write>
	lcd_write(CMD, 0x04);	// Set temperature coefficient
 274:	64 e0       	ldi	r22, 0x04	; 4
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	c1 df       	rcall	.-126    	; 0x1fc <lcd_write>
	lcd_write(CMD, 0x20);	// Function set (H=0)
 27a:	60 e2       	ldi	r22, 0x20	; 32
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	be df       	rcall	.-132    	; 0x1fc <lcd_write>
	lcd_write(CMD, 0x0C);	// Set display control (normal mode)
 280:	6c e0       	ldi	r22, 0x0C	; 12
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	bb cf       	rjmp	.-138    	; 0x1fc <lcd_write>
 286:	08 95       	ret

00000288 <lcd_set_cursor_pos>:
 * parameter:
 *	row: 0-5  (row 1-6)
 *	col: 0-13 (col 1-14)
 */
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
 288:	cf 93       	push	r28
 28a:	c6 2f       	mov	r28, r22
	row = 0x40 | row;						// set row
 28c:	68 2f       	mov	r22, r24
 28e:	60 64       	ori	r22, 0x40	; 64
	lcd_write(CMD, row);
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	b4 df       	rcall	.-152    	; 0x1fc <lcd_write>
	col = 0x80 | (col * CHR_TOTAL_WIDTH);	// set column
 294:	6c 2f       	mov	r22, r28
 296:	66 0f       	add	r22, r22
 298:	6c 0f       	add	r22, r28
 29a:	66 0f       	add	r22, r22
 29c:	60 68       	ori	r22, 0x80	; 128
	lcd_write(CMD, col);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	ad df       	rcall	.-166    	; 0x1fc <lcd_write>
}
 2a2:	cf 91       	pop	r28
 2a4:	08 95       	ret

000002a6 <lcd_clear>:

/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
	lcd_set_cursor_pos(0,0);
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	ec df       	rcall	.-40     	; 0x288 <lcd_set_cursor_pos>
 2b0:	c4 e5       	ldi	r28, 0x54	; 84
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i= 0; i < 84;i++)
	{
		lcd_write(CHR,' ');
 2b4:	60 e2       	ldi	r22, 0x20	; 32
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	a1 df       	rcall	.-190    	; 0x1fc <lcd_write>
 2ba:	21 97       	sbiw	r28, 0x01	; 1
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	lcd_set_cursor_pos(0,0);
	for (int i= 0; i < 84;i++)
 2bc:	20 97       	sbiw	r28, 0x00	; 0
 2be:	d1 f7       	brne	.-12     	; 0x2b4 <lcd_clear+0xe>
	{
		lcd_write(CHR,' ');
	}
	lcd_set_cursor_pos(0,0);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	e1 df       	rcall	.-62     	; 0x288 <lcd_set_cursor_pos>
}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// Configure I/O
	SET_BIT(DDRG, 5);		// Column 0 (output)
 2cc:	9d 9a       	sbi	0x13, 5	; 19
	SET_BIT(DDRE, 3);		// Column 1 (output)
 2ce:	6b 9a       	sbi	0x0d, 3	; 13
	SET_BIT(DDRH, 3);		// Column 2 (output)
 2d0:	e1 e0       	ldi	r30, 0x01	; 1
 2d2:	f1 e0       	ldi	r31, 0x01	; 1
 2d4:	80 81       	ld	r24, Z
 2d6:	88 60       	ori	r24, 0x08	; 8
 2d8:	80 83       	st	Z, r24
	SET_BIT(DDRH, 4);		// Column 3 (output)
 2da:	80 81       	ld	r24, Z
 2dc:	80 61       	ori	r24, 0x10	; 16
 2de:	80 83       	st	Z, r24
	CLR_BIT(DDRF, 5);		// Row 0 (input)
 2e0:	85 98       	cbi	0x10, 5	; 16
	CLR_BIT(DDRF, 4);		// Row 1 (input)
 2e2:	84 98       	cbi	0x10, 4	; 16
	CLR_BIT(DDRE, 4);		// Row 2 (input)
 2e4:	6c 98       	cbi	0x0d, 4	; 13
	CLR_BIT(DDRE, 5);		// Row 3 (input)
 2e6:	6d 98       	cbi	0x0d, 5	; 13
 2e8:	08 95       	ret

000002ea <numkey_read>:
 *	If a key is pressed, then a character that represents the key is returned.
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
	SET_BIT(PORTG, 5);			// Set column 0
 2ea:	a5 9a       	sbi	0x14, 5	; 20
	CLR_BIT(PORTE, 3);			// Clear column 1
 2ec:	73 98       	cbi	0x0e, 3	; 14
	CLR_BIT(PORTH, 3);			// Clear column 2
 2ee:	e2 e0       	ldi	r30, 0x02	; 2
 2f0:	f1 e0       	ldi	r31, 0x01	; 1
 2f2:	80 81       	ld	r24, Z
 2f4:	87 7f       	andi	r24, 0xF7	; 247
 2f6:	80 83       	st	Z, r24
	CLR_BIT(PORTH, 4);			// Clear column 3
 2f8:	80 81       	ld	r24, Z
 2fa:	8f 7e       	andi	r24, 0xEF	; 239
 2fc:	80 83       	st	Z, r24
	delay_ms(5);
 2fe:	85 e0       	ldi	r24, 0x05	; 5
 300:	2e df       	rcall	.-420    	; 0x15e <delay_ms>
	if (PINF & 0x20) {			// Row 0?
 302:	7d 99       	sbic	0x0f, 5	; 15
 304:	44 c0       	rjmp	.+136    	; 0x38e <numkey_read+0xa4>
		return key_map[0];
	} else if (PINF & 0x10) {	// Row 1?
 306:	7c 99       	sbic	0x0f, 4	; 15
 308:	44 c0       	rjmp	.+136    	; 0x392 <numkey_read+0xa8>
		return key_map[1];
	} else if (PINE & 0x10) {	// Row 2?
 30a:	64 99       	sbic	0x0c, 4	; 12
 30c:	44 c0       	rjmp	.+136    	; 0x396 <numkey_read+0xac>
		return key_map[2];
	} else if (PINE & 0x20) {	// Row 3?
 30e:	65 99       	sbic	0x0c, 5	; 12
 310:	44 c0       	rjmp	.+136    	; 0x39a <numkey_read+0xb0>
		return key_map[3];
	}
	
	CLR_BIT(PORTG, 5);			// Clear column 0
 312:	a5 98       	cbi	0x14, 5	; 20
	SET_BIT(PORTE, 3);			// Set column 1
 314:	73 9a       	sbi	0x0e, 3	; 14
	CLR_BIT(PORTH, 3);			// Clear column 2
 316:	e2 e0       	ldi	r30, 0x02	; 2
 318:	f1 e0       	ldi	r31, 0x01	; 1
 31a:	80 81       	ld	r24, Z
 31c:	87 7f       	andi	r24, 0xF7	; 247
 31e:	80 83       	st	Z, r24
	CLR_BIT(PORTH, 4);			// Clear column 3
 320:	80 81       	ld	r24, Z
 322:	8f 7e       	andi	r24, 0xEF	; 239
 324:	80 83       	st	Z, r24
	delay_ms(5);
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	1a df       	rcall	.-460    	; 0x15e <delay_ms>
	if (PINF & 0x20) {			// Row 0?
 32a:	7d 99       	sbic	0x0f, 5	; 15
 32c:	38 c0       	rjmp	.+112    	; 0x39e <numkey_read+0xb4>
		return key_map[4];
	} else if (PINF & 0x10) {	// Row 1?
 32e:	7c 99       	sbic	0x0f, 4	; 15
 330:	38 c0       	rjmp	.+112    	; 0x3a2 <numkey_read+0xb8>
		return key_map[5];
	} else if (PINE & 0x10) {	// Row 2?
 332:	64 99       	sbic	0x0c, 4	; 12
 334:	38 c0       	rjmp	.+112    	; 0x3a6 <numkey_read+0xbc>
		return key_map[6];
	} else if (PINE & 0x20) {	// Row 3?
 336:	65 99       	sbic	0x0c, 5	; 12
 338:	38 c0       	rjmp	.+112    	; 0x3aa <numkey_read+0xc0>
		return key_map[7];
	}

	CLR_BIT(PORTG, 5);			// Clear column 0
 33a:	a5 98       	cbi	0x14, 5	; 20
	CLR_BIT(PORTE, 3);			// Set column 1
 33c:	73 98       	cbi	0x0e, 3	; 14
	SET_BIT(PORTH, 3);			// Clear column 2
 33e:	e2 e0       	ldi	r30, 0x02	; 2
 340:	f1 e0       	ldi	r31, 0x01	; 1
 342:	80 81       	ld	r24, Z
 344:	88 60       	ori	r24, 0x08	; 8
 346:	80 83       	st	Z, r24
	CLR_BIT(PORTH, 4);			// Clear column 3
 348:	80 81       	ld	r24, Z
 34a:	8f 7e       	andi	r24, 0xEF	; 239
 34c:	80 83       	st	Z, r24
	delay_ms(5);
 34e:	85 e0       	ldi	r24, 0x05	; 5
 350:	06 df       	rcall	.-500    	; 0x15e <delay_ms>
	if (PINF & 0x20) {			// Row 0?
 352:	7d 99       	sbic	0x0f, 5	; 15
 354:	2c c0       	rjmp	.+88     	; 0x3ae <numkey_read+0xc4>
		return key_map[8];
		} else if (PINF & 0x10) {	// Row 1?
 356:	7c 99       	sbic	0x0f, 4	; 15
 358:	2c c0       	rjmp	.+88     	; 0x3b2 <numkey_read+0xc8>
		return key_map[9];
		} else if (PINE & 0x10) {	// Row 2?
 35a:	64 99       	sbic	0x0c, 4	; 12
 35c:	2c c0       	rjmp	.+88     	; 0x3b6 <numkey_read+0xcc>
		return key_map[10];
		} else if (PINE & 0x20) {	// Row 3?
 35e:	65 99       	sbic	0x0c, 5	; 12
 360:	2c c0       	rjmp	.+88     	; 0x3ba <numkey_read+0xd0>
		return key_map[11];
	}
	
	
	CLR_BIT(PORTG, 5);			// Clear column 0
 362:	a5 98       	cbi	0x14, 5	; 20
	CLR_BIT(PORTE, 3);			// Set column 1
 364:	73 98       	cbi	0x0e, 3	; 14
	CLR_BIT(PORTH, 3);			// Clear column 2
 366:	e2 e0       	ldi	r30, 0x02	; 2
 368:	f1 e0       	ldi	r31, 0x01	; 1
 36a:	80 81       	ld	r24, Z
 36c:	87 7f       	andi	r24, 0xF7	; 247
 36e:	80 83       	st	Z, r24
	SET_BIT(PORTH, 4);			// Clear column 3
 370:	80 81       	ld	r24, Z
 372:	80 61       	ori	r24, 0x10	; 16
 374:	80 83       	st	Z, r24
	delay_ms(5);
 376:	85 e0       	ldi	r24, 0x05	; 5
 378:	f2 de       	rcall	.-540    	; 0x15e <delay_ms>
	if (PINF & 0x20) {			// Row 0?
 37a:	7d 99       	sbic	0x0f, 5	; 15
 37c:	20 c0       	rjmp	.+64     	; 0x3be <numkey_read+0xd4>
		return key_map[12];
		} else if (PINF & 0x10) {	// Row 1?
 37e:	7c 99       	sbic	0x0f, 4	; 15
 380:	20 c0       	rjmp	.+64     	; 0x3c2 <numkey_read+0xd8>
		return key_map[13];
		} else if (PINE & 0x10) {	// Row 2?
 382:	64 99       	sbic	0x0c, 4	; 12
 384:	20 c0       	rjmp	.+64     	; 0x3c6 <numkey_read+0xdc>
		return key_map[14];
		} else if (PINE & 0x20) {	// Row 3?
 386:	65 9b       	sbis	0x0c, 5	; 12
 388:	20 c0       	rjmp	.+64     	; 0x3ca <numkey_read+0xe0>
		return key_map[15];
 38a:	84 e4       	ldi	r24, 0x44	; 68
 38c:	08 95       	ret
	CLR_BIT(PORTE, 3);			// Clear column 1
	CLR_BIT(PORTH, 3);			// Clear column 2
	CLR_BIT(PORTH, 4);			// Clear column 3
	delay_ms(5);
	if (PINF & 0x20) {			// Row 0?
		return key_map[0];
 38e:	81 e3       	ldi	r24, 0x31	; 49
 390:	08 95       	ret
	} else if (PINF & 0x10) {	// Row 1?
		return key_map[1];
 392:	84 e3       	ldi	r24, 0x34	; 52
 394:	08 95       	ret
	} else if (PINE & 0x10) {	// Row 2?
		return key_map[2];
 396:	87 e3       	ldi	r24, 0x37	; 55
 398:	08 95       	ret
	} else if (PINE & 0x20) {	// Row 3?
		return key_map[3];
 39a:	8a e2       	ldi	r24, 0x2A	; 42
 39c:	08 95       	ret
	SET_BIT(PORTE, 3);			// Set column 1
	CLR_BIT(PORTH, 3);			// Clear column 2
	CLR_BIT(PORTH, 4);			// Clear column 3
	delay_ms(5);
	if (PINF & 0x20) {			// Row 0?
		return key_map[4];
 39e:	82 e3       	ldi	r24, 0x32	; 50
 3a0:	08 95       	ret
	} else if (PINF & 0x10) {	// Row 1?
		return key_map[5];
 3a2:	85 e3       	ldi	r24, 0x35	; 53
 3a4:	08 95       	ret
	} else if (PINE & 0x10) {	// Row 2?
		return key_map[6];
 3a6:	88 e3       	ldi	r24, 0x38	; 56
 3a8:	08 95       	ret
	} else if (PINE & 0x20) {	// Row 3?
		return key_map[7];
 3aa:	80 e3       	ldi	r24, 0x30	; 48
 3ac:	08 95       	ret
	CLR_BIT(PORTE, 3);			// Set column 1
	SET_BIT(PORTH, 3);			// Clear column 2
	CLR_BIT(PORTH, 4);			// Clear column 3
	delay_ms(5);
	if (PINF & 0x20) {			// Row 0?
		return key_map[8];
 3ae:	83 e3       	ldi	r24, 0x33	; 51
 3b0:	08 95       	ret
		} else if (PINF & 0x10) {	// Row 1?
		return key_map[9];
 3b2:	86 e3       	ldi	r24, 0x36	; 54
 3b4:	08 95       	ret
		} else if (PINE & 0x10) {	// Row 2?
		return key_map[10];
 3b6:	89 e3       	ldi	r24, 0x39	; 57
 3b8:	08 95       	ret
		} else if (PINE & 0x20) {	// Row 3?
		return key_map[11];
 3ba:	83 e2       	ldi	r24, 0x23	; 35
 3bc:	08 95       	ret
	CLR_BIT(PORTE, 3);			// Set column 1
	CLR_BIT(PORTH, 3);			// Clear column 2
	SET_BIT(PORTH, 4);			// Clear column 3
	delay_ms(5);
	if (PINF & 0x20) {			// Row 0?
		return key_map[12];
 3be:	81 e4       	ldi	r24, 0x41	; 65
 3c0:	08 95       	ret
		} else if (PINF & 0x10) {	// Row 1?
		return key_map[13];
 3c2:	82 e4       	ldi	r24, 0x42	; 66
 3c4:	08 95       	ret
		} else if (PINE & 0x10) {	// Row 2?
		return key_map[14];
 3c6:	83 e4       	ldi	r24, 0x43	; 67
 3c8:	08 95       	ret
		return key_map[15];
	}
	
	
	// no key was pressed!
	return NO_KEY;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret

000003ce <_exit>:
 3ce:	f8 94       	cli

000003d0 <__stop_program>:
 3d0:	ff cf       	rjmp	.-2      	; 0x3d0 <__stop_program>
